import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.Month;
import java.time.Year;
import java.time.format.TextStyle;
import java.time.temporal.TemporalAdjusters;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author Jose Eliud Bernal
 */
public class ReportSell extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;

    /**
     * Creates new form Control
     */
    public ReportSell() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(406, 405));
        setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(119, 171, 183));
        jPanel1.setName(""); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Perpetua Titling MT", 1, 18)); // NOI18N
        jLabel1.setText("REPORTE DE VENTAS");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 140, -1, -1));

        jPanel3.setBackground(new java.awt.Color(119, 171, 183));

        jLabel3.setFont(new java.awt.Font("Perpetua Titling MT", 0, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("GENERAR REPORTE MENSUAL");
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel3MouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 220, 260, 30));

        jPanel4.setBackground(new java.awt.Color(119, 171, 183));

        jLabel5.setFont(new java.awt.Font("Perpetua Titling MT", 0, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("GENERAR REPORTE ANUAL");
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel5MouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 280, 260, 30));

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseEntered
        jPanel3.setBackground(new Color(29,62,83));
        jLabel3.setForeground(Color.white);
    }//GEN-LAST:event_jLabel3MouseEntered

    private void jLabel3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseExited
        jPanel3.setBackground(new Color(119,171,183));
        jLabel3.setForeground(Color.black);
    }//GEN-LAST:event_jLabel3MouseExited

    private void jLabel5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseEntered
        jPanel4.setBackground(new Color(29,62,83));
        jLabel5.setForeground(Color.white);
    }//GEN-LAST:event_jLabel5MouseEntered

    private void jLabel5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseExited
        jPanel4.setBackground(new Color(119,171,183));
        jLabel5.setForeground(Color.black);
    }//GEN-LAST:event_jLabel5MouseExited

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        try {
            pdfMen();
        } catch (SQLException | IOException ex) {
            Logger.getLogger(ReportSell.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        try {
            pdfAnu();
        } catch (SQLException | IOException ex) {
            Logger.getLogger(ReportSell.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLabel5MouseClicked
    public void pdfMen() throws SQLException, IOException{
        try {
            Cone con = new Cone();
            Connection cn = con.conexion();
            Document repVen = new Document(PageSize.LETTER);
            repVen.setMargins(72, 72, 72, 72);
            Month mes = LocalDate.now().getMonth();
            int año = LocalDate.now().getYear();
            String mesAct = mes.getDisplayName(TextStyle.FULL, new Locale("es", "ES"));
            String añoAct = String.valueOf(año);
            mesAct = mesAct.substring(0, 1).toUpperCase() + mesAct.substring(1);
            PdfWriter pdfNom = PdfWriter.getInstance(repVen, new FileOutputStream("src/Reportes/Venta/Mensuales/Reporte de Ventas de " + mesAct + " de " + añoAct +".pdf"));
            repVen.open();
            Font priFue = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD);
            Font segFue = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
            Font terFue = new Font(Font.FontFamily.TIMES_ROMAN, 12);
            Paragraph titulo = new Paragraph("Reporte de Ventas Mensual - " + mesAct, priFue);
            titulo.setAlignment(Element.ALIGN_CENTER);
            repVen.add(titulo);
            Paragraph periodo = new Paragraph("Periodo: " + mesAct + " del " + añoAct, segFue);
            periodo.setAlignment(Element.ALIGN_CENTER);
            repVen.add(new Paragraph("\n"));
            repVen.add(periodo);
            repVen.add(new Paragraph("\n"));
            Paragraph resGen = new Paragraph("Resumen General ", segFue);   
            resGen.setAlignment(Element.ALIGN_LEFT);
            repVen.add(resGen);
            //Valor de todas las ventas mensuales
            PreparedStatement conTot = cn.prepareStatement("SELECT SUM(preciot) AS TotalVentasMes "
                    + "FROM venta WHERE YEAR(fecha) = ? AND MONTH(fecha) = ?");
            conTot.setInt(1, Year.now().getValue());
            conTot.setInt(2, mes.getValue());
            ResultSet rs = conTot.executeQuery();
            String venTot = rs.next() ? rs.getString("TotalVentasMes") : null;
            Paragraph totVen = new Paragraph("Ventas totales del mes: $" + venTot, terFue);
            repVen.add(totVen);
            //Cantidad de ventas mensuales
            PreparedStatement canVen = cn.prepareStatement("SELECT COUNT(*) AS CantidadDeVentas FROM venta "
                    + "WHERE MONTH(fecha) = MONTH(CURRENT_DATE()) AND YEAR(fecha) = YEAR(CURRENT_DATE())");
            ResultSet rs1 = canVen.executeQuery();
            String canTot = rs1.next() ? rs1.getString("CantidadDeVentas") : null;
            Paragraph totCan = new Paragraph("Cantidad de ventas del mes: " + canTot, terFue);
            repVen.add(totCan);
            //Consultar Ganancia mensuales
            PreparedStatement ganMen = cn.prepareStatement ("SELECT SUM(vp.prec - (p.preciocom * vp.cantidad)) "
                    + "AS Ganancias FROM ventaprenda vp JOIN prenda p ON vp.id_pren = p.cod_p JOIN venta v "
                    + "ON vp.Id_ven = v.cod_ven WHERE MONTH(v.fecha) = MONTH(CURRENT_DATE())");
            ResultSet rs5 = ganMen.executeQuery();
            int ganTot = rs5.next() ? rs5.getInt("Ganancias") : 0;
            PreparedStatement resGanMen = cn.prepareStatement ("SELECT SUM(Precio) AS Resta FROM salida "
                    + "WHERE MONTH(fecha) = MONTH(CURRENT_DATE())");
            ResultSet rs7 = resGanMen.executeQuery();
            int ganRes = rs7.next() ? rs7.getInt("Resta") : 0;
            int ganTotFin = ganTot - ganRes;
            Paragraph totGan = new Paragraph("Ganancias del mes: " + ganTotFin, terFue);
            repVen.add(totGan);
            Font cuaFue = new Font(Font.FontFamily.TIMES_ROMAN, 10);
            Paragraph advGanMen = new Paragraph("Nota: Es relevante enfatizar que el valor de ganancias corresponde "
                    + "específicamente al beneficio neto, ya que se obtiene al restar los gastos de las salidas. "
                    + "En otras palabras, este valor representa la cantidad final que queda disponible "
                    + "después de considerar todos los costos y deducciones. ", cuaFue);
            advGanMen.setAlignment(Element.ALIGN_CENTER);
            repVen.add(advGanMen);
            //Prendas mas vendidas y su cantidad
            PreparedStatement preMasVen = cn.prepareStatement("SELECT vp.id_pren, p.descripción, tp.Prenda, "
                    + "SUM(vp.cantidad) AS total_vendido FROM ventaprenda vp JOIN venta v ON vp.Id_ven = v.cod_ven "
                    + "JOIN prenda p ON vp.id_pren = p.cod_p JOIN tipoprend tp ON tp.Cod_tp = p.TipoPrend "
                    + "WHERE MONTH(v.fecha) = MONTH(CURRENT_DATE()) GROUP BY vp.id_pren, p.descripción, tp.Prenda "
                    + "ORDER BY total_vendido DESC LIMIT 5;");
            ResultSet rs2 = preMasVen.executeQuery();
            PdfPTable tabPro = new PdfPTable(4);
            tabPro.addCell(new Phrase ("ID de Prenda", segFue));
            tabPro.addCell(new Phrase ("Descripción", segFue));
            tabPro.addCell(new Phrase ("Prenda", segFue));
            tabPro.addCell(new Phrase ("Cantidad Vendida", segFue));
            while (rs2.next()) {
                tabPro.addCell(new Phrase(rs2.getString("id_pren"), terFue));
                tabPro.addCell(new Phrase(rs2.getString("descripción"), terFue));
                tabPro.addCell(new Phrase(rs2.getString("Prenda"), terFue));
                tabPro.addCell(new Phrase(rs2.getString("total_vendido"), terFue));
            }
            repVen.add(new Paragraph("Prendas mas vendidas: ", terFue));
            repVen.add(new Paragraph("\n"));
            repVen.add(tabPro);
            //Comparación de ventas en relación a los meses anteriores
            PreparedStatement canVenMes = cn.prepareStatement("SELECT CASE WHEN MONTH(fecha) = 1 THEN 'Enero' "
                    + "WHEN MONTH(fecha) = 2 THEN 'Febrero' WHEN MONTH(fecha) = 3 THEN 'Marzo' WHEN MONTH(fecha) = 4 "
                    + "THEN 'Abril' WHEN MONTH(fecha) = 5 THEN 'Mayo' WHEN MONTH(fecha) = 6 THEN 'Junio' "
                    + "WHEN MONTH(fecha) = 7 THEN 'Julio' WHEN MONTH(fecha) = 8 THEN 'Agosto' WHEN MONTH(fecha) = 9 "
                    + "THEN 'Septiembre' WHEN MONTH(fecha) = 10 THEN 'Octubre' WHEN MONTH(fecha) = 11 "
                    + "THEN 'Noviembre' WHEN MONTH(fecha) = 12 THEN 'Diciembre' ELSE 'Desconocido' END AS Mes, "
                    + "COUNT(*) AS CantidadDeVentas FROM venta WHERE YEAR(fecha) = YEAR(CURRENT_DATE()) "
                    + "GROUP BY MONTH(fecha) ");
            ResultSet rs3 = canVenMes.executeQuery();
            PdfPTable tabVenPas = new PdfPTable(2);
            tabVenPas.addCell(new Phrase ("Mes", segFue));
            tabVenPas.addCell(new Phrase ("Cantidad de ventas", segFue));
            while (rs3.next()){
                tabVenPas.addCell(new Phrase(rs3.getString("Mes"), terFue));
                tabVenPas.addCell(new Phrase(rs3.getString("CantidadDeVentas"), terFue));
            }
            repVen.add(new Paragraph("Comparación en Cuanto a los Meses Anteriores ", segFue));
            repVen.add(new Paragraph("Cantidades de ventas ", terFue));
            repVen.add(new Paragraph("\n"));
            repVen.add(tabVenPas);
            //Comparacion de precios en relación a los meses anteriores
            PreparedStatement preVenMes = cn.prepareStatement("SELECT CASE WHEN MONTH(fecha) = 1 THEN 'Enero' "
                    + "WHEN MONTH(fecha) = 2 THEN 'Febrero' WHEN MONTH(fecha) = 3 THEN 'Marzo' WHEN MONTH(fecha) = 4 "
                    + "THEN 'Abril' WHEN MONTH(fecha) = 5 THEN 'Mayo' WHEN MONTH(fecha) = 6 THEN 'Junio' "
                    + "WHEN MONTH(fecha) = 7 THEN 'Julio' WHEN MONTH(fecha) = 8 THEN 'Agosto' WHEN MONTH(fecha) = 9 "
                    + "THEN 'Septiembre' WHEN MONTH(fecha) = 10 THEN 'Octubre' WHEN MONTH(fecha) = 11 "
                    + "THEN 'Noviembre' WHEN MONTH(fecha) = 12 THEN 'Diciembre' ELSE 'Desconocido' END AS Mes, "
                    + "SUM(preciot) AS sumVen FROM venta WHERE YEAR(fecha) = YEAR(CURRENT_DATE()) "
                    + "GROUP BY MONTH(fecha) ");
            ResultSet rs4 = preVenMes.executeQuery();
            PdfPTable tabPreVen = new PdfPTable(2);
            tabPreVen.addCell(new Phrase ("Mes", segFue));
            tabPreVen.addCell(new Phrase ("Total en ventas", segFue));
            while (rs4.next()){
                tabPreVen.addCell(new Phrase(rs4.getString("Mes"), terFue));
                tabPreVen.addCell(new Phrase(rs4.getString("sumVen"), terFue));
            }
            repVen.add(new Paragraph("Valor de ventas ", terFue));
            repVen.add(new Paragraph("\n"));
            repVen.add(tabPreVen);
            repVen.add(new Paragraph("Detalle de los elementos vendidos ", segFue));
            //Consultar todas las ventas
            PreparedStatement totVenMes = cn.prepareStatement("SELECT cod_ven, preciot, fecha, cliente_id "
                    + "FROM venta WHERE MONTH(fecha) = MONTH(CURRENT_DATE())"
                    + "GROUP BY cod_ven, preciot, fecha, cliente_id");
            ResultSet rs6 = totVenMes.executeQuery();
            PdfPTable tabTotVen = new PdfPTable(4);
            tabTotVen.addCell(new Phrase ("Codigo de venta", segFue));
            tabTotVen.addCell(new Phrase ("Precio Total", segFue));
            tabTotVen.addCell(new Phrase ("Fecha", segFue));
            tabTotVen.addCell(new Phrase ("Cliente", segFue));
            while (rs6.next()) {
                tabTotVen.addCell(new Phrase(rs6.getString("cod_ven"), terFue));
                tabTotVen.addCell(new Phrase(rs6.getString("preciot"), terFue));
                tabTotVen.addCell(new Phrase(rs6.getString("fecha"), terFue));
                tabTotVen.addCell(new Phrase(rs6.getString("cliente_id"), terFue));
            }
            repVen.add(new Paragraph("Total de ventas ", terFue));
            repVen.add(new Paragraph("\n"));
            repVen.add(tabTotVen);
            repVen.close();
            String rutaPDF = "src/Reportes/Venta/Mensuales/Reporte de Ventas de " + mesAct + " de " + añoAct +".pdf";
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                File archivoPDF = new File(rutaPDF);
                if (archivoPDF.exists()) {      
                    desktop.open(archivoPDF);
                } else {
                    System.err.println("El archivo no existe: " + rutaPDF);
                }
            }
        } catch (DocumentException | FileNotFoundException e) {
        }
    }
    public void pdfAnu() throws SQLException, IOException{
        try {
            Cone con = new Cone();
            Connection cn = con.conexion();
            Document repVen = new Document(PageSize.LETTER);
            repVen.setMargins(72, 72, 72, 72);
            int año = LocalDate.now().getYear();
            String añoAct = String.valueOf(año);
            PdfWriter pdfNom = PdfWriter.getInstance(repVen, new FileOutputStream("src/Reportes/Venta/Anuales/Reporte de Ventas de " + añoAct +".pdf"));
            repVen.open();
            Font priFue = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD);
            Font segFue = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
            Font terFue = new Font(Font.FontFamily.TIMES_ROMAN, 12);
            Paragraph titulo = new Paragraph("Reporte de Ventas Anual - " + añoAct, priFue);
            titulo.setAlignment(Element.ALIGN_CENTER);
            repVen.add(titulo);
            Paragraph periodo = new Paragraph("Periodo: " + añoAct, segFue);
            periodo.setAlignment(Element.ALIGN_CENTER);
            repVen.add(new Paragraph("\n"));
            repVen.add(periodo);
            repVen.add(new Paragraph("\n"));
            Paragraph resGen = new Paragraph("Resumen General ", segFue);   
            resGen.setAlignment(Element.ALIGN_LEFT);
            repVen.add(resGen);
            //Valor de todas las ventas anuales
            PreparedStatement conTot = cn.prepareStatement("SELECT SUM(preciot) AS TotalVentasAño "
                    + "FROM venta WHERE YEAR(fecha) = ?");
            conTot.setInt(1, Year.now().getValue());
            ResultSet rs = conTot.executeQuery();
            String venTot = rs.next() ? rs.getString("TotalVentasAño") : null;
            Paragraph totVen = new Paragraph("Ventas totales del año: $" + venTot, terFue);
            repVen.add(totVen);
            //Cantidad de ventas anuales
            PreparedStatement canVen = cn.prepareStatement("SELECT COUNT(*) AS CantidadDeVentas FROM venta "
                    + "WHERE YEAR(fecha) = YEAR(CURRENT_DATE())");
            ResultSet rs1 = canVen.executeQuery();
            String canTot = rs1.next() ? rs1.getString("CantidadDeVentas") : null;
            Paragraph totCan = new Paragraph("Cantidad de ventas del año: " + canTot, terFue);
            repVen.add(totCan);
            //Consultar Ganancias Anuales
            PreparedStatement ganAño = cn.prepareStatement ("SELECT SUM(vp.prec - (p.preciocom * vp.cantidad)) "
                    + "AS Ganancias FROM ventaprenda vp JOIN prenda p ON vp.id_pren = p.cod_p JOIN venta v "
                    + "ON vp.Id_ven = v.cod_ven WHERE YEAR(v.fecha) = YEAR(CURRENT_DATE())");
            ResultSet rs5 = ganAño.executeQuery();
            int ganTot = rs5.next() ? rs5.getInt("Ganancias") : 0;
            PreparedStatement resGanMen = cn.prepareStatement ("SELECT SUM(Precio) AS Resta FROM salida WHERE "
                    + "YEAR(fecha) = YEAR(CURRENT_DATE()) ");
            ResultSet rs7 = resGanMen.executeQuery();
            int ganRes = rs7.next() ? rs7.getInt("Resta") : 0;
            int ganTotFin = ganTot - ganRes;
            Paragraph totGan = new Paragraph("Ganancias del año: " + ganTotFin, terFue);
            repVen.add(totGan);
            Font cuaFue = new Font(Font.FontFamily.TIMES_ROMAN, 10);
            Paragraph advGanMen = new Paragraph("Nota: Es relevante enfatizar que el valor de ganancias corresponde "
                    + "específicamente al beneficio neto, ya que se obtiene al restar los gastos de las salidas. "
                    + "En otras palabras, este valor representa la cantidad final que queda disponible "
                    + "después de considerar todos los costos y deducciones. ", cuaFue);
            advGanMen.setAlignment(Element.ALIGN_CENTER);
            repVen.add(advGanMen);
            //Prendas mas vendidas y su cantidad
            PreparedStatement preMasVen = cn.prepareStatement("SELECT vp.id_pren, p.descripción, tp.Prenda, "
                    + "SUM(vp.cantidad) AS total_vendido FROM ventaprenda vp JOIN venta v ON vp.Id_ven = v.cod_ven "
                    + "JOIN prenda p ON vp.id_pren = p.cod_p JOIN tipoprend tp ON tp.Cod_tp = p.TipoPrend "
                    + "WHERE YEAR(v.fecha) = YEAR(CURRENT_DATE()) GROUP BY vp.id_pren, p.descripción, tp.Prenda "
                    + "ORDER BY total_vendido DESC LIMIT 5;");
            ResultSet rs2 = preMasVen.executeQuery();
            PdfPTable tabPro = new PdfPTable(4);
            tabPro.addCell(new Phrase ("ID de Prenda", segFue));
            tabPro.addCell(new Phrase ("Descripción", segFue));
            tabPro.addCell(new Phrase ("Prenda", segFue));
            tabPro.addCell(new Phrase ("Cantidad Vendida", segFue));
            while (rs2.next()) {
                tabPro.addCell(new Phrase(rs2.getString("id_pren"), terFue));
                tabPro.addCell(new Phrase(rs2.getString("descripción"), terFue));
                tabPro.addCell(new Phrase(rs2.getString("Prenda"), terFue));
                tabPro.addCell(new Phrase(rs2.getString("total_vendido"), terFue));
            }
            repVen.add(new Paragraph("Prendas mas vendidas: ", terFue));
            repVen.add(new Paragraph("\n"));
            repVen.add(tabPro);
            //Comparación de ventas en relación a los años anteriores
            PreparedStatement canVenMes = cn.prepareStatement("SELECT YEAR(fecha) AS Año, COUNT(*) "
                    + "AS CantidadDeVentas FROM venta GROUP BY YEAR(fecha) ");
            ResultSet rs3 = canVenMes.executeQuery();
            PdfPTable tabVenPas = new PdfPTable(2);
            tabVenPas.addCell(new Phrase ("Año", segFue));
            tabVenPas.addCell(new Phrase ("Cantidad de ventas", segFue));
            while (rs3.next()){
                tabVenPas.addCell(new Phrase(rs3.getString("Año"), terFue));
                tabVenPas.addCell(new Phrase(rs3.getString("CantidadDeVentas"), terFue));
            }
            repVen.add(new Paragraph("Comparación en Cuanto a los Años Anteriores ", segFue));
            repVen.add(new Paragraph("Cantidades de ventas ", terFue));
            repVen.add(new Paragraph("\n"));
            repVen.add(tabVenPas);
            //Comparacion de precios en relación a los años anteriores
            PreparedStatement preVenMes = cn.prepareStatement("SELECT YEAR(fecha) AS Año, SUM(preciot) AS TotaldeVentas FROM venta GROUP BY YEAR(fecha) ");
            ResultSet rs4 = preVenMes.executeQuery();
            PdfPTable tabPreVen = new PdfPTable(2);
            tabPreVen.addCell(new Phrase ("Año", segFue));
            tabPreVen.addCell(new Phrase ("Total en ventas", segFue));
            while (rs4.next()){
                tabPreVen.addCell(new Phrase(rs4.getString("Año"), terFue));
                tabPreVen.addCell(new Phrase(rs4.getString("TotaldeVentas"), terFue));
            }
            repVen.add(new Paragraph("Valor de ventas ", terFue));
            repVen.add(new Paragraph("\n"));
            repVen.add(tabPreVen);
            repVen.close();
            String rutaPDF = "src/Resportes/Venta/Anuales/Reporte de Ventas de " + añoAct +".pdf";
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                File archivoPDF = new File(rutaPDF);
                if (archivoPDF.exists()) {      
                    desktop.open(archivoPDF);
                } else {
                    System.err.println("El archivo no existe: " + rutaPDF);
                }
            }
        } catch (DocumentException | FileNotFoundException e) {
        }
    }
    public void mouAut() throws IOException {
        LocalDate hoy = LocalDate.now();
        LocalDate ultimoDiaDelMes = hoy.with(TemporalAdjusters.lastDayOfMonth());
        if (LocalDate.now().equals(ultimoDiaDelMes)) {
            try {
                pdfMen();
            } catch (SQLException ex) {
                Logger.getLogger(ReportSell.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables

}
