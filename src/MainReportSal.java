
import java.awt.Color;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.Month;
import java.time.Year;
import java.time.format.TextStyle;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author Jose Eliud Bernal
 */
public class MainReportSal extends javax.swing.JPanel {

    /**
     * Creates new form Control
     */
    public MainReportSal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(406, 405));
        setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(119, 171, 183));
        jPanel1.setName(""); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Perpetua Titling MT", 1, 18)); // NOI18N
        jLabel1.setText("REPORTE DE SALIDAS");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, -1, -1));

        jPanel3.setBackground(new java.awt.Color(119, 171, 183));

        jLabel3.setFont(new java.awt.Font("Perpetua Titling MT", 0, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("GENERAR REPORTE MENSUAL");
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel3MouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 240, -1, -1));

        jPanel4.setBackground(new java.awt.Color(119, 171, 183));

        jLabel5.setFont(new java.awt.Font("Perpetua Titling MT", 0, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("GENERAR REPORTE ANUAL");
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel5MouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 300, -1, -1));

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseEntered
        jPanel3.setBackground(new Color(29,62,83));
        jLabel3.setForeground(Color.white);
    }//GEN-LAST:event_jLabel3MouseEntered

    private void jLabel3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseExited
        jPanel3.setBackground(new Color(119,171,183));
        jLabel3.setForeground(Color.black);
    }//GEN-LAST:event_jLabel3MouseExited

    private void jLabel5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseEntered
        jPanel4.setBackground(new Color(29,62,83));
        jLabel5.setForeground(Color.white);
    }//GEN-LAST:event_jLabel5MouseEntered

    private void jLabel5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseExited
        jPanel4.setBackground(new Color(119,171,183));
        jLabel5.setForeground(Color.black);
    }//GEN-LAST:event_jLabel5MouseExited
    public class Reporte {
        public static void generarReporteMes (Cone con, Document documento){
            try {
                int año = LocalDate.now().getYear();
                String añoAct = String.valueOf(año);
                Month mes = LocalDate.now().getMonth();
                String mesAct = mes.getDisplayName(TextStyle.FULL, new Locale("es", "ES"));
                mesAct = mesAct.substring(0, 1).toUpperCase() + mesAct.substring(1);
                Connection cn = (Connection) con.conexion();
                Font priFue = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD);
                Font segFue = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
                Font terFue = new Font(Font.FontFamily.TIMES_ROMAN, 12);
                Paragraph titulo = new Paragraph("Reporte de Salidas Mensual - " + mesAct, priFue);
                titulo.setAlignment(Element.ALIGN_CENTER);
                documento.add(titulo);
                Paragraph periodo = new Paragraph("Periodo: " + mesAct + " del " + añoAct, segFue);
                periodo.setAlignment(Element.ALIGN_CENTER);
                documento.add(new Paragraph("\n"));
                documento.add(periodo);
                documento.add(new Paragraph("\n"));
                Paragraph resGen = new Paragraph("Resumen General ", segFue);   
                resGen.setAlignment(Element.ALIGN_LEFT);
                documento.add(resGen);
                //Valor total de las salidas del mes 
                    PreparedStatement salTot = cn.prepareStatement("SELECT SUM(Precio) AS TotalSalidasMes "
                            + "FROM salida WHERE YEAR(fecha) = ? AND MONTH(fecha) = ? ");
                salTot.setInt(1, Year.now().getValue());
                salTot.setInt(2, mes.getValue());
                ResultSet rs = salTot.executeQuery();
                String salTotMes = rs.next() ? rs.getString("TotalSalidasMes") : null;
                Paragraph sumSalTotMes = new Paragraph("Cantidad de salidas del mes: " + salTotMes, terFue);
                documento.add(sumSalTotMes);
                //Cantidad de salidas en el mes
                    PreparedStatement canSal = cn.prepareStatement("SELECT COUNT(número) AS CanSal FROM salida "
                            + "WHERE MONTH(fecha) = MONTH(CURRENT_DATE()) AND YEAR(fecha) = YEAR(CURRENT_DATE()) ");
                ResultSet rs1 = canSal.executeQuery();
                String canSalMes = rs1.next() ? rs1.getString("CanSal") : null;
                documento.add(new Paragraph("Cantidad de salidas del mes: " + canSalMes, terFue));
                //Comparación de cantidad con meses anteriores
                documento.add(new Paragraph("Comparación en Cuanto a los Meses Anteriores ", segFue));
                documento.add(new Paragraph("Cantidades de salidas ", terFue));
                documento.add(new Paragraph("\n"));
                    PreparedStatement comSal = cn.prepareStatement("SELECT CASE WHEN MONTH(fecha) = 1 THEN 'Enero' WHEN MONTH(fecha) = 2 THEN 'Febrero' WHEN MONTH(fecha) = 3 THEN 'Marzo' WHEN MONTH(fecha) = 4 THEN 'Abril' WHEN MONTH(fecha) = 5 THEN 'Mayo' WHEN MONTH(fecha) = 6 THEN 'Junio' WHEN MONTH(fecha) = 7 THEN 'Julio' WHEN MONTH(fecha) = 8 THEN 'Agosto' WHEN MONTH(fecha) = 9 THEN 'Septiembre' WHEN MONTH(fecha) = 10 THEN 'Octubre' WHEN MONTH(fecha) = 11 THEN 'Noviembre' WHEN MONTH(fecha) = 12 THEN 'Diciembre' ELSE 'Desconocido' END AS Mes, COUNT(*) AS CantidadDeSalidas FROM salida WHERE YEAR(fecha) = YEAR(CURRENT_DATE()) GROUP BY MONTH(fecha)  ");
                ResultSet rs2 = comSal.executeQuery();
                PdfPTable tabSalPas = new PdfPTable(2);
                tabSalPas.addCell(new Phrase ("Mes", segFue));
                tabSalPas.addCell(new Phrase ("Cantidad de salidas", segFue));
                while (rs2.next()){
                    tabSalPas.addCell(new Phrase(rs2.getString("Mes"), terFue));
                    tabSalPas.addCell(new Phrase(rs2.getString("CantidadDeSalidas"), terFue));
                }
                documento.add(tabSalPas);
                //Comparación de valor con los precios anteriores
                PreparedStatement comPreSal = cn.prepareStatement("SELECT CASE WHEN MONTH(fecha) = 1 THEN 'Enero' WHEN MONTH(fecha) = 2 THEN 'Febrero' WHEN MONTH(fecha) = 3 THEN 'Marzo' WHEN MONTH(fecha) = 4 THEN 'Abril' WHEN MONTH(fecha) = 5 THEN 'Mayo' WHEN MONTH(fecha) = 6 THEN 'Junio' WHEN MONTH(fecha) = 7 THEN 'Julio' WHEN MONTH(fecha) = 8 THEN 'Agosto' WHEN MONTH(fecha) = 9 THEN 'Septiembre' WHEN MONTH(fecha) = 10 THEN 'Octubre' WHEN MONTH(fecha) = 11 THEN 'Noviembre' WHEN MONTH(fecha) = 12 THEN 'Diciembre' ELSE 'Desconocido' END AS Mes, SUM(Precio) AS PrecioDeSalidas FROM salida WHERE YEAR(fecha) = YEAR(CURRENT_DATE()) GROUP BY MONTH(fecha)  ");
                ResultSet rs3 = comPreSal.executeQuery();
                PdfPTable tabSalAnt = new PdfPTable(2);
                tabSalAnt.addCell(new Phrase ("Mes", segFue));
                tabSalAnt.addCell(new Phrase ("Valor de salidas", segFue));
                while (rs3.next()){
                    tabSalAnt.addCell(new Phrase(rs3.getString("Mes"), terFue));
                    tabSalAnt.addCell(new Phrase(rs3.getString("PrecioDeSalidas"), terFue));
                }
                documento.add(new Paragraph("Valor de salidas ", terFue));
                documento.add(new Paragraph("\n"));
                documento.add(tabSalAnt);
                documento.add(new Paragraph("Detalle de las salidas ", segFue)); 
                documento.add(new Paragraph("\n"));
                //Salidas del mes
                    PreparedStatement pst = cn.prepareStatement("SELECT * FROM salida WHERE MONTH(fecha) = "
                            + "MONTH(CURRENT_DATE()) GROUP BY número, descripción, Precio, fecha");
                ResultSet rs4 = pst.executeQuery();
                PdfPTable tabla = new PdfPTable(4);
                tabla.addCell("número");
                tabla.addCell("descripción");
                tabla.addCell("Precio");
                tabla.addCell("fecha");
                while (rs4.next()) {
                    tabla.addCell(rs4.getString("número"));
                    tabla.addCell(rs4.getString("descripción"));
                    tabla.addCell(rs4.getString("Precio"));
                    tabla.addCell(rs4.getString("fecha"));
                }   
                documento.add(tabla);
                documento.close();
                JOptionPane.showMessageDialog(null, "Reporte creado");
            } catch (DocumentException | SQLException e) {
                JOptionPane.showMessageDialog(null, "Error al guardar reporte"+ e);            }   
            }
    }
    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        Document documento = new Document();
        try {
            int año = LocalDate.now().getYear();
            String añoAct = String.valueOf(año);
            Month mes = LocalDate.now().getMonth();
            String mesAct = mes.getDisplayName(TextStyle.FULL, new Locale("es", "ES"));
            mesAct = mesAct.substring(0, 1).toUpperCase() + mesAct.substring(1);
            PdfWriter.getInstance(documento, new FileOutputStream("C:/Users/Jose Eliud Bernal/Desktop/Salidas/Mensuales/"
                    + "Reprote de Salidas Mes de " + mesAct + " del " + añoAct + ".pdf"));
            documento.open();
            Cone con = new Cone();
            Reporte.generarReporteMes(con, documento);
            documento.close();
            String rutaPDF = "C:/Users/Jose Eliud Bernal/Desktop/Salidas/Mensuales/"
                    + "Reprote de Salidas Mes de " + mesAct + " del " + añoAct + ".pdf";
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                File archivoPDF = new File(rutaPDF);
                if (archivoPDF.exists()) {      
                    desktop.open(archivoPDF);
                } else {
                    System.err.println("El archivo no existe: " + rutaPDF);
                }
            }
        } catch (DocumentException | FileNotFoundException e) {
            JOptionPane.showMessageDialog(null, "Error al crear documento");
        } catch (IOException ex) {
            Logger.getLogger(MainReportSal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLabel3MouseClicked
        public class ReporteAnual {
        public static void GenerarReporteAnual (Cone con, Document documento){
            try {
                int año = LocalDate.now().getYear();
                String añoAct = String.valueOf(año);
                Connection cn = (Connection) con.conexion();
                Font priFue = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD);
                Font segFue = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
                Font terFue = new Font(Font.FontFamily.TIMES_ROMAN, 12);
                Paragraph titulo = new Paragraph("Reporte de Salidas Anual - " + añoAct, priFue);
                titulo.setAlignment(Element.ALIGN_CENTER);
                documento.add(titulo);
                Paragraph periodo = new Paragraph("Periodo: " + añoAct, segFue);
                periodo.setAlignment(Element.ALIGN_CENTER);
                documento.add(new Paragraph("\n"));
                documento.add(periodo);
                documento.add(new Paragraph("\n"));
                Paragraph resGen = new Paragraph("Resumen General ", segFue);   
                resGen.setAlignment(Element.ALIGN_LEFT);
                documento.add(resGen);
                //Valor total de las salidas del Año 
                    PreparedStatement salTot = cn.prepareStatement("SELECT SUM(Precio) AS TotalSalidasAño "
                            + "FROM salida WHERE YEAR(fecha) = ? ");
                salTot.setInt(1, Year.now().getValue());
                ResultSet rs = salTot.executeQuery();
                String salTotAño = rs.next() ? rs.getString("TotalSalidasAño") : null;
                Paragraph sumSalTotAño = new Paragraph("Cantidad de salidas del año: " + salTotAño, terFue);
                documento.add(sumSalTotAño);
                //Cantidad de salidas en el Año
                    PreparedStatement canSal = cn.prepareStatement("SELECT COUNT(número) AS CanSal FROM salida "
                            + "WHERE YEAR(fecha) = YEAR(CURRENT_DATE()) ");
                ResultSet rs1 = canSal.executeQuery();
                String canSalAño = rs1.next() ? rs1.getString("CanSal") : null;
                documento.add(new Paragraph("Cantidad de salidas del año: " + canSalAño, terFue));
                //Comparación de cantidad con años anteriores
                documento.add(new Paragraph("Comparación en Cuanto a los Años Anteriores ", segFue));
                documento.add(new Paragraph("Cantidades de salidas ", terFue));
                documento.add(new Paragraph("\n"));
                    PreparedStatement comSal = cn.prepareStatement("SELECT YEAR(fecha) AS Año, "
                            + "COUNT(*) AS CantidadDeSalidas FROM salida GROUP BY YEAR(fecha) ");
                ResultSet rs2 = comSal.executeQuery();
                PdfPTable tabSalPas = new PdfPTable(2);
                tabSalPas.addCell(new Phrase ("Año", segFue));
                tabSalPas.addCell(new Phrase ("Cantidad de salidas", segFue));
                while (rs2.next()){
                    tabSalPas.addCell(new Phrase(rs2.getString("Año"), terFue));
                    tabSalPas.addCell(new Phrase(rs2.getString("CantidadDeSalidas"), terFue));
                }
                documento.add(tabSalPas);
                //Comparación de valor con los precios anteriores
                PreparedStatement comPreSal = cn.prepareStatement("SELECT YEAR(fecha) As Año, "
                        + "SUM(Precio) AS PrecioDeSalidas FROM salida GROUP BY YEAR(fecha) ");
                ResultSet rs3 = comPreSal.executeQuery();
                PdfPTable tabSalAnt = new PdfPTable(2);
                tabSalAnt.addCell(new Phrase ("Año", segFue));
                tabSalAnt.addCell(new Phrase ("Valor de salidas", segFue));
                while (rs3.next()){
                    tabSalAnt.addCell(new Phrase(rs3.getString("Año"), terFue));
                    tabSalAnt.addCell(new Phrase(rs3.getString("PrecioDeSalidas"), terFue));
                }
                documento.add(new Paragraph("Valor de salidas ", terFue));
                documento.add(new Paragraph("\n"));
                documento.add(tabSalAnt);
                documento.close();
            } catch (DocumentException | SQLException e) {
                JOptionPane.showMessageDialog(null, "Error al guardar reporte" +e);
            }
        }
        }
    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        Document documento = new Document();
        try {
            int año = LocalDate.now().getYear();
            String añoAct = String.valueOf(año);
            PdfWriter.getInstance(documento, new FileOutputStream("C:/Users/Jose Eliud Bernal/Desktop/Salidas/Anuales/"
                    + "Reprote de Salidas del " + añoAct + ".pdf"));
            documento.open();
            Cone con = new Cone();
            ReporteAnual.GenerarReporteAnual(con, documento);
            documento.close();
            String rutaPDF = "C:/Users/Jose Eliud Bernal/Desktop/Salidas/Anuales/"
                    + "Reprote de Salidas del " + añoAct + ".pdf";
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                File archivoPDF = new File(rutaPDF);
                if (archivoPDF.exists()) {      
                    desktop.open(archivoPDF);
                } else {
                    System.err.println("El archivo no existe: " + rutaPDF);
                }
            }
        } catch (DocumentException | FileNotFoundException e) {
            JOptionPane.showMessageDialog(null, "Error al crear documento");
        } catch (IOException ex) {
            Logger.getLogger(MainReportSal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLabel5MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables

    Object getContentPane() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
